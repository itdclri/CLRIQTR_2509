@model CLRIQTR.Models.EmpMastTest
@{
    ViewBag.Title = "Add Employee";
}

<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        box-shadow: 0px 0px 0px 0px #000;
    }

    legend.scheduler-border {
        font-size: 1.2em !important;
        font-weight: bold !important;
        text-align: left !important;
        width: auto;
        padding: 0 10px;
        border-bottom: none;
    }
</style>

<nav class="navbar navbar-expand navbar-light bg-light mb-4">
    <div class="container">
        @* Left-aligned nav links *@
        <ul class="navbar-nav me-auto">
            <li class="nav-item">
                <a class="nav-link" href="@Url.Action("Index", "Admin")"><i class="bi bi-house-door-fill"></i> Home</a>
            </li>
            @if (Session["LabCode"] != null && Session["LabCode"].ToString() == "100")
            {
                <li class="nav-item">
                    <a class="nav-link" href="@Url.Action("GenerateTentativeReport", "Admin")"><i class="bi bi-file-earmark-text"></i> Generate Tentative Report</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" aria-current="page" href="@Url.Action("GenerateFinalReport", "Admin")"><i class="bi bi-file-earmark-check-fill"></i> Generate Final Report</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" aria-current="page" href="@Url.Action("Rule", "Admin")"><i class="bi bi-journal-text"></i> Rule 10.1</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" aria-current="page" href="@Url.Action("RoomStatusView", "Admin")"><span><i class="bi bi-door-open-fill"></i> Quarters Status</span></a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" aria-current="page" href="@Url.Action("Applications", "Admin")">
                        <span><i class="bi bi-file"></i> Applications</span>
                    </a>
                </li>
            }
        </ul>

        @* Right-aligned user info *@
        <div class="d-flex align-items-center ms-auto">
            <div class="navbar-text me-3">
                <i class="bi bi-person-badge"></i> Employee Number : <b>@Session["EmpNo"]</b><br />
                <i class="bi bi-building"></i> Lab Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <b>
                    @{
                        if (Session["LabCode"] != null)
                        {
                            switch (Session["LabCode"].ToString())
                            {
                                case "100":
                                    @:CLRI; 
                                    break;
                                case "101":
                                    @:SERC;
                                    break;
                                case "102": 
                                    @:CMC; 
                                    break;
                            }
                        }
                    }
                </b>
            </div>
        </div>

        @* Logout Button *@
        <ul class="navbar-nav mb-0">
            <li class="nav-item">
                <a class="nav-link text-danger" style="font-size: 1.1rem;" href="@Url.Action("Logout", "Admin")"><i class="bi bi-box-arrow-right"></i> Logout</a>
            </li>
        </ul>
    </div>
</nav>

<h2>Add Employee</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

<div class="form-horizontal">
    <div class="form-group">
        @Html.Label("Employee Number", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.EmpNo, new { @class = "form-control", pattern = "[0-9]+", title = "Please enter numbers only.", required = "required" })
            @Html.ValidationMessageFor(m => m.EmpNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Employee Name", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.EmpName, new { @class = "form-control", pattern = @"[a-zA-Z\s]+", title = "Please enter letters and spaces only.", required = "required" })
            @Html.ValidationMessageFor(m => m.EmpName, "", new { @class = "text-danger" })
        </div>
    </div>

    @{
        var labNames = new Dictionary<string, string> { { "100", "CLRI" }, { "101", "SERC" }, { "102", "CMC" } };
        var sessionLabCode = Session["LabCode"]?.ToString();
    }
    @if (sessionLabCode != null && labNames.ContainsKey(sessionLabCode))
    {
        <div class="form-group">
            <label class="control-label col-md-2">Lab</label>
            <div class="col-md-4">
                <input type="text" value="@labNames[sessionLabCode]" class="form-control" readonly="readonly" />
                <input type="hidden" id="LabCode" name="LabCode" value="@sessionLabCode" />
            </div>
        </div>
    }

    <div class="form-group">
        @Html.LabelFor(m => m.Gender, new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Gender, (SelectList)ViewBag.GenderList, "-- Select Gender --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Pay Level", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownList("PayLvl", (SelectList)ViewBag.BasicPayList, "-- Select Pay Level --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.PayLvl, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Designation", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Designation, (SelectList)ViewBag.Designations, "-- Select Designation --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Designation, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Date of Birth", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBox("DOB_dt_display", Model.DOB_dt.HasValue ? Model.DOB_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOB_dt_display", @autocomplete = "off" })
            @Html.HiddenFor(m => m.DOB_dt)
            @Html.ValidationMessageFor(m => m.DOB_dt, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Date of Joining", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBox("DOJ_dt_display", Model.DOJ_dt.HasValue ? Model.DOJ_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOJ_dt_display", @autocomplete = "off" })
            @Html.HiddenFor(m => m.DOJ_dt)
            @Html.ValidationMessageFor(m => m.DOJ_dt, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Date of Present Post", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBox("DOP_dt_display", Model.DOP_dt.HasValue ? Model.DOP_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOP_dt_display", @autocomplete = "off" })
            @Html.HiddenFor(m => m.DOP_dt)
            @Html.ValidationMessageFor(m => m.DOP_dt, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Date of Superannuation", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBox("DOR_dt_display", Model.DOR_dt.HasValue ? Model.DOR_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOR_dt_display", @autocomplete = "off" })
            @Html.HiddenFor(m => m.DOR_dt)
            @Html.ValidationMessageFor(m => m.DOR_dt, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Basic Pay", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.BasicPay, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.BasicPay, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Category, new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Category, new SelectList(new[] { "GEN", "SC", "ST", "OBC" }), "-- Select Category --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Category, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @type = "email" })
            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Physically Handicapped", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Phy, (SelectList)ViewBag.PhyList, "-- Select --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Phy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Mobile Number", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.MobileNumber, new { @class = "form-control", @type = "tel" })
            @Html.ValidationMessageFor(m => m.MobileNumber, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
    <fieldset class="scheduler-border">
        <legend class="scheduler-border">Family Details</legend>
        <br />
        <div id="dependentsContainer"></div>
        <div class="row" style="margin-top:15px;">
            <div class="col-md-12">
                <button type="button" id="addDependentBtn" class="btn btn-sm btn-success">
                    <i class="fa fa-plus"></i> Add Dependent
                </button>
            </div>
        </div>
    </fieldset>

    <div id="dependentTemplate" style="display: none;">
        <div class="row dependent-row" style="margin-bottom: 10px; display: flex; align-items: center;">
            <div class="col-md-5">
                <select class="form-control dependent-type-dropdown">
                    <option value="">-- Select Type --</option>
                </select>
            </div>
            <div class="col-md-5">
                <input type="text" class="form-control" placeholder="Enter Dependent's Name" />
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-sm btn-danger remove-dependent-btn">
                    <i class="fa fa-trash"></i> Remove
                </button>
            </div>
        </div>
    </div>

    <div class="form-group create-center-button">
        <input type="submit" value="Create" class="btn btn-primary" />
        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function () {

        // =======================================================
        // ==  1. DATEPICKER INITIALIZATION
        // =======================================================
        const datepickerOptions = {
            dateFormat: 'dd-mm-yy',  // Format for the VISIBLE field
            changeMonth: true,
            changeYear: true,
            yearRange: 'c-100:c+10'
        };

        $('#DOB_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOB_dt',      // ID of the hidden field to update
            altFormat: 'yy-mm-dd'     // Format for the HIDDEN field (MySQL format)
        }));

        $('#DOJ_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOJ_dt',
            altFormat: 'yy-mm-dd'
        }));

        $('#DOP_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOP_dt',
            altFormat: 'yy-mm-dd'
        }));

        $('#DOR_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOR_dt',
            altFormat: 'yy-mm-dd'
        }));


        // =======================================================
        // ==  2. DATE CALCULATION AND VALIDATION LOGIC
        // =======================================================
        $('#DOB_dt_display').on('change', function () {
            const dobValue = $(this).val();
            if (dobValue) {
                try {
                    let dobDate = $.datepicker.parseDate('dd-mm-yy', dobValue);
                    dobDate.setFullYear(dobDate.getFullYear() + 60);
                    $('#DOR_dt_display').datepicker('setDate', dobDate);
                } catch (e) {
                    $('#DOR_dt_display').val('');
                    $('#DOR_dt').val('');
                }
            } else {
                $('#DOR_dt_display').val('');
                $('#DOR_dt').val('');
            }
        });

        $('#DOJ_dt_display').on('change', function () {
             try {
                var dob = $.datepicker.parseDate('dd-mm-yy', $('#DOB_dt_display').val());
                var doj = $.datepicker.parseDate('dd-mm-yy', $(this).val());
                if (dob && doj && doj < dob) {
                    alert('Date of Joining cannot be before Date of Birth.');
                    $(this).val('');
                    $('#DOJ_dt').val('');
                }
            } catch (e) { /* ignore */ }
        });


        // =======================================================
        // ==  3. YOUR EXISTING DEPENDENT-HANDLING LOGIC
        // =======================================================
        function reindexRows() {
            $('#dependentsContainer .dependent-row').each(function (index) {
                $(this).find('.dependent-type-dropdown').attr('name', 'Dependents[' + index + '].DependentTypeId');
                $(this).find('input[type="text"]').attr('name', 'Dependents[' + index + '].Name');
            });
        }
        const container = $('#dependentsContainer');
        const template = $('#dependentTemplate');
        $.getJSON('@Url.Action("GetDependentTypes")', function (types) {
            const dropdown = template.find('.dependent-type-dropdown');
            dropdown.find('option:gt(0)').remove();
            $.each(types, function (i, type) {
                dropdown.append($('<option>', { value: type.Id, text: type.TypeName }));
            });
        });
        $('#addDependentBtn').on('click', function () {
            container.append(template.html());
            reindexRows();
        });
        container.on('click', '.remove-dependent-btn', function () {
            $(this).closest('.dependent-row').remove();
            reindexRows();
        });
        container.on('change', '.dependent-type-dropdown', function () {
            const nameInput = $(this).closest('.dependent-row').find('input[type="text"]');
            const selectedText = $(this).find('option:selected').text();
            if (selectedText.trim().toLowerCase() === 'self') {
                nameInput.val('Self').prop('readonly', true);
            } else {
                nameInput.val('').prop('readonly', false).focus();
            }
        });
    });
    </script>
}