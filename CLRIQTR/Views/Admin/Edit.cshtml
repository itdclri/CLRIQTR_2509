@model CLRIQTR.Models.EmpMastTest
@{
    ViewBag.Title = "Edit Employee";
}

<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        box-shadow: 0px 0px 0px 0px #000;
    }

    legend.scheduler-border {
        font-size: 1.2em !important;
        font-weight: bold !important;
        text-align: left !important;
        width: auto;
        padding: 0 10px;
        border-bottom: none;
    }
</style>

<nav class="navbar navbar-expand navbar-light bg-light mb-4">
    <div class="container">
        @* Left-aligned nav links *@
        <ul class="navbar-nav me-auto">
            <li class="nav-item">
                <a class="nav-link" href="@Url.Action("Index", "Admin")"><i class="bi bi-house-door-fill"></i> Home</a>
            </li>
            @if (Session["LabCode"] != null && Session["LabCode"].ToString() == "100")
            {
                <li class="nav-item"><a class="nav-link" href="@Url.Action("GenerateTentativeReport", "Admin")"><i class="bi bi-file-earmark-text"></i> Generate Tentative Report</a></li>
                <li class="nav-item"><a class="nav-link" aria-current="page" href="@Url.Action("GenerateFinalReport", "Admin")"><i class="bi bi-file-earmark-check-fill"></i> Generate Final Report</a></li>
                <li class="nav-item"><a class="nav-link" aria-current="page" href="@Url.Action("Rule", "Admin")"><i class="bi bi-journal-text"></i> Rule 10.1</a></li>
                <li class="nav-item"><a class="nav-link" aria-current="page" href="@Url.Action("RoomStatusView", "Admin")"><span><i class="bi bi-door-open-fill"></i> Quarters Status</span></a></li>
            }
        </ul>
        @* Right-aligned user info *@
        <div class="d-flex align-items-center ms-auto">
            <div class="navbar-text me-3">
                <i class="bi bi-person-badge"></i> Employee Number : <b>@Session["EmpNo"]</b><br />
                <i class="bi bi-building"></i> Lab Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <b>
                    @{
                        if (Session["LabCode"] != null)
                        {
                            switch (Session["LabCode"].ToString())
                            {
                                case "100":
                                    @:CLRI;
                                    break;
                                case "101": @:SERC;
                                break;
                                case "102": 
                                    @:CMC; 
                                    break;
                            }
                        }
                    }
                </b>
            </div>
        </div>
        @* Logout Button *@
        <ul class="navbar-nav mb-0">
            <li class="nav-item"><a class="nav-link text-danger" style="font-size: 1.1rem;" href="@Url.Action("Logout", "Admin")"><i class="bi bi-box-arrow-right"></i> Logout</a></li>
        </ul>
    </div>
</nav>

<h2 class="text-center">Edit Employee - @Model.EmpNo</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.EmpNo)
    <input type="hidden" name="returnUrl" value="@ViewBag.ReturnUrl" />

    <div class="form-horizontal">
        <div class="form-group">
            @Html.Label("Employee Name", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.EmpName, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(m => m.EmpName)
            </div>
        </div>

        @{
            var labNames = new Dictionary<int, string> { { 100, "CLRI" }, { 101, "SERC" }, { 102, "CMC" } };
            bool isRecordInFixedLab = Model.LabCode != 0 && labNames.ContainsKey(Model.LabCode);
        }
        <div class="form-group">
            @Html.Label("Lab", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @if (isRecordInFixedLab)
                {
                    <input type="text" value="@labNames[Model.LabCode]" class="form-control" readonly="readonly" />
                    @Html.HiddenFor(m => m.LabCode)
                }
                else
                {
                    @Html.DropDownListFor(m => m.LabCode, (SelectList)ViewBag.Labs, "-- Select Lab --", new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.LabCode)
                }
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Designation", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(m => m.Designation, (SelectList)ViewBag.Designations, "-- Select Designation --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Designation)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Gender, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(m => m.Gender, (SelectList)ViewBag.GenderList, "-- Select Gender --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Gender)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Pay Level", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.PayLvl, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.PayLvl)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Active Status", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(m => m.Active, (SelectList)ViewBag.ActiveList, "-- Select Status --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Active)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Date of Birth", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBox("DOB_dt_display", Model.DOB_dt.HasValue ? Model.DOB_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOB_dt_display", @autocomplete = "off" })
                @Html.HiddenFor(m => m.DOB_dt, new { id = "DOB_dt" })
                @Html.ValidationMessageFor(m => m.DOB_dt)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Date of Joining", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBox("DOJ_dt_display", Model.DOJ_dt.HasValue ? Model.DOJ_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOJ_dt_display", @autocomplete = "off" })
                @Html.HiddenFor(m => m.DOJ_dt, new { id = "DOJ_dt" })
                @Html.ValidationMessageFor(m => m.DOJ_dt)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Date of Present Post", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBox("DOP_dt_display", Model.DOP_dt.HasValue ? Model.DOP_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOP_dt_display", @autocomplete = "off" })
                @Html.HiddenFor(m => m.DOP_dt, new { id = "DOP_dt" })
                @Html.ValidationMessageFor(m => m.DOP_dt)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Date of Superannuation", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBox("DOR_dt_display", Model.DOR_dt.HasValue ? Model.DOR_dt.Value.ToString("dd-MM-yyyy") : "", new { @class = "form-control", id = "DOR_dt_display", @autocomplete = "off" })
                @Html.HiddenFor(m => m.DOR_dt, new { id = "DOR_dt" })
                @Html.ValidationMessageFor(m => m.DOR_dt)
                <span id="dor-error" class="text-danger" style="display:none;">Date of Superannuation is Required when Status is Changed.</span>
            </div>
        </div>

        <div class="form-group">
            @Html.Label("BasicPay", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.BasicPay, new { @class = "form-control", type = "number", min = "0" })
                @Html.ValidationMessageFor(m => m.BasicPay)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Category, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(m => m.Category, new SelectList(new[] { "GEN", "SC", "ST", "OBC" }), "-- Select Category --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Category)
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(m => m.Email, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @type = "email" })
                @Html.ValidationMessageFor(m => m.Email)
            </div>
        </div>



        <div class="form-group">
            @Html.Label("Physically Handicapped", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(m => m.Phy, (SelectList)ViewBag.PhyList, "-- Select --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Phy)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Mobile Number", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.MobileNumber, new { @class = "form-control", @type = "tel" })
                @Html.ValidationMessageFor(m => m.MobileNumber)
            </div>
        </div>
    </div>

    <div class="form-group create-center-button">
        <input type="submit" value="Update" class="btn btn-primary" />
        <a href="@(ViewBag.ReturnUrl ?? Url.Action("Index"))" class="btn btn-default">Back</a>
    </div>
}

<hr />

<fieldset class="scheduler-border">
    <br />
    <legend class="scheduler-border">Family Details Management</legend>
    <br />
    <br />
    <table class="table table-bordered" id="dependentsTable">
        <thead>
            <tr>
                <th>Relation Type</th>
                <th>Name</th>
                <th style="width: 150px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Dependents != null)
            {
                foreach (var dep in Model.Dependents)
                {
                    <tr data-id="@dep.Id" data-empno="@Model.EmpNo">
                        <td data-typeid="@dep.DependentTypeId">
                            @(((SelectList)ViewBag.DependentTypes).FirstOrDefault(x => x.Value == dep.DependentTypeId.ToString())?.Text ?? "Unknown Type")
                        </td>
                        <td>@dep.Name</td>
                        <td>
                            <button class="btn btn-sm btn-info edit-btn">Edit</button>
                            <button class="btn btn-sm btn-danger delete-btn">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button id="addNewDependentBtn" class="btn btn-success"><i class="fa fa-plus"></i> Add New Dependent</button>
</fieldset>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function () {

        // =======================================================
        // ==  1. DATEPICKER SETUP
        // =======================================================
        const datepickerOptions = {
            dateFormat: 'dd-mm-yy',  // VISIBLE format for the user
            changeMonth: true,
            changeYear: true,
            yearRange: 'c-100:c+10'
        };

        // Initialize all datepickers, linking the visible input to its hidden counterpart
        $('#DOB_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOB_dt',      // Hidden field for DOB
            altFormat: 'yy-mm-dd'     // HIDDEN format for the server
        }));

        $('#DOJ_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOJ_dt',
            altFormat: 'yy-mm-dd'
        }));

        $('#DOP_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOP_dt',
            altFormat: 'yy-mm-dd'
        }));

        $('#DOR_dt_display').datepicker($.extend({}, datepickerOptions, {
            altField: '#DOR_dt',
            altFormat: 'yy-mm-dd'
        }));


        // =======================================================
        // ==  2. DATE CALCULATION LOGIC
        // =======================================================
        // When DOB changes, calculate DOR
        $('#DOB_dt_display').on('change', function () {
            const dobValue = $(this).val();
            if (dobValue) {
                try {
                    let dobDate = $.datepicker.parseDate('dd-mm-yy', dobValue);
                    dobDate.setFullYear(dobDate.getFullYear() + 60);
                    // This sets the visible field, which in turn updates the hidden field automatically
                    $('#DOR_dt_display').datepicker('setDate', dobDate);
                } catch (e) {
                    $('#DOR_dt_display').val('');
                    $('#DOR_dt').val('');
                }
            } else {
                $('#DOR_dt_display').val('');
                $('#DOR_dt').val('');
            }
        });


        // =======================================================
        // ==  3. FAMILY DETAILS (DEPENDENTS) LOGIC
        // =======================================================
        const tableBody = $('#dependentsTable tbody');
        const dependentTypes = @Html.Raw(Json.Encode(ViewBag.DependentTypes));

        function buildDropdown(selectedValue) {
            let dropdown = '<select class="form-control">';
            dropdown += '<option value="">-- Select Type --</option>';
            dependentTypes.forEach(function(type) {
                const isSelected = type.Value == selectedValue ? ' selected' : '';
                dropdown += `<option value="${type.Value}"${isSelected}>${type.Text}</option>`;
            });
            dropdown += '</select>';
            return dropdown;
        }

        // --- Edit Button ---
        tableBody.on('click', '.edit-btn', function () {
            const row = $(this).closest('tr');
            const typeCell = row.find('td:eq(0)');
            const nameCell = row.find('td:eq(1)');
            const currentTypeId = typeCell.data('typeid');
            const currentName = nameCell.text().trim();
            typeCell.html(buildDropdown(currentTypeId));
            nameCell.html(`<input type="text" class="form-control" value="${currentName}" />`);
            $(this).removeClass('edit-btn btn-info').addClass('save-btn btn-success').text('Save');
            row.find('.delete-btn').removeClass('delete-btn btn-danger').addClass('cancel-btn btn-warning').text('Cancel');
        });

        // --- Cancel Button ---
        tableBody.on('click', '.cancel-btn', function () {
            const row = $(this).closest('tr');
            if (row.data('id') === undefined) {
                row.remove();
                return;
            }
            const typeCell = row.find('td:eq(0)');
            const nameCell = row.find('td:eq(1)');
            const originalTypeId = typeCell.data('typeid');
            const originalTypeName = dependentTypes.find(t => t.Value == originalTypeId)?.Text || 'Unknown Type';
            const originalName = nameCell.find('input').prop('defaultValue');
            typeCell.html(originalTypeName);
            nameCell.html(originalName);
            $(this).removeClass('cancel-btn btn-warning').addClass('delete-btn btn-danger').text('Delete');
            row.find('.save-btn').removeClass('save-btn btn-success').addClass('edit-btn btn-info').text('Edit');
        });

        // --- Save (Update/Insert) Button ---
        tableBody.on('click', '.save-btn', function () {
            const row = $(this).closest('tr');
            const id = row.data('id');
            const empNo = row.data('empno');
            const typeId = row.find('select').val();
            const name = row.find('input').val();
            const typeText = row.find('select option:selected').text();
            if (!typeId || !name) {
                alert('Please select a type and enter a name.');
                return;
            }
            const isNew = !id;
            const url = isNew ? '@Url.Action("AddDependent", "Admin")' : '@Url.Action("UpdateDependent", "Admin")';
            const data = { Id: id, EmpNo: empNo, DependentTypeId: typeId, Name: name };

            $.post(url, data, function(response) {
                if (response.success) {
                    row.find('td:eq(0)').html(typeText).data('typeid', typeId);
                    row.find('td:eq(1)').html(name);
                    row.find('.cancel-btn').removeClass('cancel-btn btn-warning').addClass('delete-btn btn-danger').text('Delete');
                    row.find('.save-btn').removeClass('save-btn btn-success').addClass('edit-btn btn-info').text('Edit');
                    if(isNew && response.dependent) {
                        row.data('id', response.dependent.Id);
                    }
                } else {
                    alert('Error saving dependent: ' + (response.message || 'Unknown error'));
                }
            }).fail(function() {
                alert('A server error occurred while saving. Please try again.');
            });
        });

        // --- Delete Button ---
        tableBody.on('click', '.delete-btn', function () {
            if (!confirm('Are you sure you want to delete this dependent?')) return;
            const row = $(this).closest('tr');
            const id = row.data('id');
            $.post('@Url.Action("DeleteDependent", "Admin")', { id: id }, function(response) {
                if (response.success) {
                    row.fadeOut(300, function() { $(this).remove(); });
                } else {
                    alert('Error deleting dependent: ' + (response.message || 'Unknown error'));
                }
            }).fail(function() {
                alert('A server error occurred while deleting. Please try again.');
            });
        });

        // --- Add New Button ---
        $('#addNewDependentBtn').on('click', function() {
            const empNo = '@Model.EmpNo';
            const newRow = `
                <tr data-empno="${empNo}">
                    <td>${buildDropdown('')}</td>
                    <td><input type="text" class="form-control" placeholder="Enter Name" /></td>
                    <td>
                        <button class="btn btn-sm btn-success save-btn">Save</button>
                        <button class="btn btn-sm btn-warning cancel-btn">Cancel</button>
                    </td>
                </tr>`;
            tableBody.append(newRow);
        });

        // =======================================================
        // ==  4. ACTIVE STATUS VALIDATION LOGIC
        // =======================================================
        var activeChanged = false;
        $('#Active').change(function () {
            activeChanged = true;
            $('#DOR_dt_display').val(''); // Clear both display and hidden fields
            $('#DOR_dt').val('');
            $('#dor-error').hide();
        });

        $('form').submit(function (e) {
            if (activeChanged) {
                var dor = $('#DOR_dt').val(); // Check the hidden field's value
                if (!dor) {
                    e.preventDefault();
                    $('#dor-error').show();
                    $('#DOR_dt_display').focus(); // Focus the visible field
                    return false;
                } else {
                    $('#dor-error').hide();
                }
            }
        });

    });
    </script>
}