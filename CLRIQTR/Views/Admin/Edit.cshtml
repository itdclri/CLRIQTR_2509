@model CLRIQTR.Models.EmpMastTest
@{
    ViewBag.Title = "Edit Employee";
}

<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        -webkit-box-shadow: 0px 0px 0px 0px #000;
        box-shadow: 0px 0px 0px 0px #000;
    }

    legend.scheduler-border {
        font-size: 1.2em !important;
        font-weight: bold !important;
        text-align: left !important;
        width: auto;
        padding: 0 10px;
        border-bottom: none;
    }
</style>

<h2 class="text-center">Edit Employee - @Model.EmpNo</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(m => m.EmpNo)

<div class="form-horizontal">
    <!-- Emp Name -->
    <div class="form-group">
        @Html.Label("Employee Name", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.EmpName, new { @class = "form-control", @readonly = "readonly" })
            @Html.ValidationMessageFor(m => m.EmpName)
        </div>
    </div>


    <!-- Lab Code -->
    @*<div class="form-group">
            @Html.Label("Lab", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(m => m.LabCode, (SelectList)ViewBag.Labs, "-- Select Lab --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.LabCode)
            </div>
        </div>*@

    @{
        // A dictionary to map lab codes to their display names
        var labNames = new Dictionary<int, string>
{
        { 100, "CLRI" },
        { 101, "SERC" },
        { 102, "CMC" }
    };

        bool isRecordInFixedLab = Model.LabCode != 0 && labNames.ContainsKey(Model.LabCode);
    }

    <div class="form-group">
        @Html.Label("Lab", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @if (isRecordInFixedLab)
            {
                <input type="text" value="@labNames[Model.LabCode]" class="form-control" readonly="readonly" />

                @Html.HiddenFor(m => m.LabCode)
            }
            else
            {
                @Html.DropDownListFor(m => m.LabCode, (SelectList)ViewBag.Labs, "-- Select Lab --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.LabCode)
            }
        </div>
    </div>

    <!-- Designation -->
    <div class="form-group">
        @Html.Label("Designation", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Designation, (SelectList)ViewBag.Designations, "-- Select Designation --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Designation)
        </div>
    </div>

    <!-- Gender -->
    <div class="form-group">
        @Html.LabelFor(m => m.Gender, new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Gender, (SelectList)ViewBag.GenderList, "-- Select Gender --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Gender)
        </div>
    </div>

    <!-- Pay Level -->
    <div class="form-group">
        @Html.Label("Pay Level", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.PayLvl, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.PayLvl)
        </div>
    </div>

    <!-- DOB -->
    <div class="form-group">
        @Html.Label("Date of Birth", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.DOB_dt, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.DOB_dt)
        </div>
    </div>

    <!-- DOJ -->
    <div class="form-group">
        @Html.Label("Date of Joining", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.DOJ_dt, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.DOJ_dt)
        </div>
    </div>

    <!-- Basic Pay -->
    <div class="form-group">
        @Html.Label("BasicPay", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.BasicPay, new { @class = "form-control", type = "number", min = "0" })
            @Html.ValidationMessageFor(m => m.BasicPay)
        </div>
    </div>

    <!-- Category -->
    <div class="form-group">
        @Html.LabelFor(m => m.Category, new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Category, new SelectList(new[] { "GEN", "SC", "ST", "OBC" }), "-- Select Category --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Category)
        </div>
    </div>

    <!-- DOP -->
    <div class="form-group">
        @Html.Label("Date of Present Post", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.DOP_dt, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.DOP_dt)
        </div>
    </div>

    <!-- DOR -->
    <div class="form-group">
        @Html.Label("Date of Superannuation", new { @class = "control-label col-md-2" })

        <div class="col-md-4">
            @Html.TextBoxFor(m => m.DOR_dt, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control", id = "DOR_dt" })
            @Html.ValidationMessageFor(m => m.DOR_dt)
            <span id="dor-error" class="text-danger" style="display:none;">Date of Superannuation is Required when Status is Changed.</span>
        </div>

    </div>


    <!-- Email -->
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @type = "email" })
            @Html.ValidationMessageFor(m => m.Email)
        </div>
    </div>

    <!-- Active Status -->
    <div class="form-group">
        @Html.Label("Active Status", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Active, (SelectList)ViewBag.ActiveList, "-- Select Status --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Active)
        </div>
    </div>

    <!-- Physically Handicapped -->
    <div class="form-group">
        @Html.Label("Physically Handicapped", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.DropDownListFor(m => m.Phy, (SelectList)ViewBag.PhyList, "-- Select --", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Phy)
        </div>
    </div>

    <!-- Mobile Number -->
    <div class="form-group">
        @Html.Label("Mobile Number", new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.TextBoxFor(m => m.MobileNumber, new { @class = "form-control", @type = "tel" })
            @Html.ValidationMessageFor(m => m.MobileNumber)
        </div>
    </div>

    <!-- Entered Date (Readonly) -->
    @*<div class="form-group">
            @Html.LabelFor(m => m.EnteredDate, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.EnteredDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @readonly = "readonly", @type = "date" })
            </div>
        </div>*@

    <!-- Entered IP (Readonly) -->
    @*<div class="form-group">
            @Html.LabelFor(m => m.EnteredIP, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.EnteredIP, new { @class = "form-control", @readonly = "readonly" })
            </div>
        </div>*@


</div>

    @*<fieldset class="scheduler-border">
        <br />
        <legend class="scheduler-border">Family Details</legend>
        <br />

        <div id="dependentsContainer">
            @if (Model.Dependents != null)
            {
                for (int i = 0; i < Model.Dependents.Count; i++)
                {
                    <div class="row dependent-row" style="margin-bottom: 10px; display: flex; align-items: center;">
                        <div class="col-md-5">
                            @Html.DropDownListFor(m => m.Dependents[i].DependentTypeId, (SelectList)ViewBag.DependentTypes, "-- Select Type --", new { @class = "form-control dependent-type-dropdown" })
                        </div>
                        <div class="col-md-5">
                            @Html.TextBoxFor(m => m.Dependents[i].Name, new { @class = "form-control", placeholder = "Enter Dependent's Name" })
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-sm btn-danger remove-dependent-btn">
                                <i class="fa fa-trash"></i> Remove
                            </button>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="row" style="margin-top:15px;">
            <div class="col-md-12">
                <button type="button" id="addDependentBtn" class="btn btn-sm btn-success">
                    <i class="fa fa-plus"></i> Add Dependent
                </button>
            </div>
        </div>
    </fieldset>

    <div id="dependentTemplate" style="display: none;">
        <div class="row dependent-row" style="margin-bottom: 10px; display: flex; align-items: center;">
            <div class="col-md-5">
                <select class="form-control dependent-type-dropdown">
                    <option value="">-- Select Type --</option>
                </select>
            </div>
            <div class="col-md-5">
                <input type="text" class="form-control" placeholder="Enter Dependent's Name" />
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-sm btn-danger remove-dependent-btn">
                    <i class="fa fa-trash"></i> Remove
                </button>
            </div>
        </div>
    </div>*@



    <!-- Submit Button -->
    <div class="form-group create-center-button">
        <input type="submit" value="Update" class="btn btn-primary" />
        @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-default" })
    </div>


}



<hr />

<fieldset class="scheduler-border">
    <br />
    <legend class="scheduler-border">Family Details Management</legend>
    <br />
    <br />
    <table class="table table-bordered" id="dependentsTable">
        <thead>
            <tr>
                <th>Relation Type</th>
                <th>Name</th>
                <th style="width: 150px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dep in Model.Dependents)
            {
                <tr data-id="@dep.Id" data-empno="@Model.EmpNo">
                    <td data-typeid="@dep.DependentTypeId">
                        @*@(((SelectList)ViewBag.DependentTypes).First(x => x.Value == dep.DependentTypeId.ToString()).Text)*@
                        @(((SelectList)ViewBag.DependentTypes).FirstOrDefault(x => x.Value == dep.DependentTypeId.ToString())?.Text ?? "Unknown Type")
                    </td>
                    <td>@dep.Name</td>
                    <td>
                        <button class="btn btn-sm btn-info edit-btn">Edit</button>
                        <button class="btn btn-sm btn-danger delete-btn">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button id="addNewDependentBtn" class="btn btn-success">
        <i class="fa fa-plus"></i> Add New Dependent
    </button>
</fieldset>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function () {
        const tableBody = $('#dependentsTable tbody');

        // Store the dependent types list in a JavaScript variable
        const dependentTypes = @Html.Raw(Json.Encode(ViewBag.DependentTypes));

        function buildDropdown(selectedValue) {
            let dropdown = '<select class="form-control">';
            dropdown += '<option value="">-- Select Type --</option>';
            dependentTypes.forEach(function(type) {
                const isSelected = type.Value == selectedValue ? ' selected' : '';
                dropdown += `<option value="${type.Value}"${isSelected}>${type.Text}</option>`;
            });
            dropdown += '</select>';
            return dropdown;
        }

        // --- Event Handler for Edit Button ---
        tableBody.on('click', '.edit-btn', function () {
            const row = $(this).closest('tr');
            const typeCell = row.find('td:eq(0)');
            const nameCell = row.find('td:eq(1)');

            const currentTypeId = typeCell.data('typeid');
            const currentName = nameCell.text().trim();

            typeCell.html(buildDropdown(currentTypeId));
            nameCell.html(`<input type="text" class="form-control" value="${currentName}" />`);

            $(this).removeClass('edit-btn btn-info').addClass('save-btn btn-success').text('Save');
            row.find('.delete-btn').removeClass('delete-btn btn-danger').addClass('cancel-btn btn-warning').text('Cancel');
        });

        // --- Event Handler for Cancel Button ---
        tableBody.on('click', '.cancel-btn', function () {
            const row = $(this).closest('tr');
            const typeCell = row.find('td:eq(0)');
            const nameCell = row.find('td:eq(1)');

            const originalTypeId = typeCell.data('typeid');
            // Find the text for the original type ID
            const originalTypeName = dependentTypes.find(t => t.Value == originalTypeId)?.Text || '';

            typeCell.html(originalTypeName);
            nameCell.html(row.find('input').val()); // Keep the latest value for now, or revert if needed

            $(this).removeClass('cancel-btn btn-warning').addClass('delete-btn btn-danger').text('Delete');
            row.find('.save-btn').removeClass('save-btn btn-success').addClass('edit-btn btn-info').text('Edit');
        });

        // --- Event Handler for Save (Update/Insert) Button ---
        tableBody.on('click', '.save-btn', function () {
            const row = $(this).closest('tr');
            const id = row.data('id');
            const empNo = row.data('empno');
            const typeId = row.find('select').val();
            const name = row.find('input').val();
            const typeText = row.find('select option:selected').text();

            if (!typeId || !name) {
                alert('Please select a type and enter a name.');
                return;
            }

            const isNew = !id; // If there is no data-id, it's a new record
            const url = isNew ? '@Url.Action("AddDependent", "Admin")' : '@Url.Action("UpdateDependent", "Admin")';
            const data = {
                Id: id,
                EmpNo: empNo,
                DependentTypeId: typeId,
                Name: name
            };

            console.log("Sending this data to controller:", data);


            $.post(url, data, function(response) {
                if (response.success) {
                    row.find('td:eq(0)').html(typeText).data('typeid', typeId);
                    row.find('td:eq(1)').html(name);
                    row.find('.cancel-btn').removeClass('cancel-btn btn-warning').addClass('delete-btn btn-danger').text('Delete');
                    row.find('.save-btn').removeClass('save-btn btn-success').addClass('edit-btn btn-info').text('Edit');

                    if(isNew && response.dependent) {
                        row.data('id', response.dependent.Id); // Set the new ID for future edits
                    }
                } else {
                    alert('Error saving dependent: ' + response.message);
                }
            });
        });

        // --- Event Handler for Delete Button ---
        tableBody.on('click', '.delete-btn', function () {
            if (!confirm('Are you sure you want to delete this dependent?')) {
                return;
            }

            const row = $(this).closest('tr');
            const id = row.data('id');

            $.post('@Url.Action("DeleteDependent", "Admin")', { id: id }, function(response) {
                if (response.success) {
                    row.fadeOut(300, function() { $(this).remove(); });
                } else {
                    alert('Error deleting dependent: ' + response.message);
                }
            });
        });

        // --- Event Handler for Add New Button ---
        $('#addNewDependentBtn').on('click', function() {
            const empNo = '@Model.EmpNo';
            const newRow = `
                <tr data-empno="${empNo}">
                    <td>${buildDropdown('')}</td>
                    <td><input type="text" class="form-control" placeholder="Enter Name" /></td>
                    <td>
                        <button class="btn btn-sm btn-success save-btn">Save</button>
                        <button class="btn btn-sm btn-warning cancel-btn">Cancel</button>
                    </td>
                </tr>`;
            tableBody.append(newRow);
        });
    });
    </script>
}